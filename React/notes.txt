Introduction to react- 
 React is a front end library

 How to start
    -creating a react app is a large task that we can use toolchains to do for us
    - there are a lot of toolchains that serve different purposes but the biggest ones are:
        - create react app
        - next.js
        -vue
        - gatsby
        -parcel

        They download not only react but stuff like ejs and ejs layout (dependng on how they are structured)

History of react:
    -react was released by facebook as an open soucre project in 2013. over the years it gained widespread adoption in the web development community due to simplicity, performance and flexibility
    - react maintained by facebook and a community of developers, and it has gone through serveral major versions, with react 18 being the latest at the time of this lesson


Uses of React:
    -react is widely used int the web development fro creating interavtive and dynamic user interfaces. it is particualrly suitable for single-page applications but can be used in various contexts including:
        -Wbesites -
            -react is used to build modern, responsive websites with interactive features

        web applications -
            -many web applications such as social media platforms, content management systems, and e-commerce sites, use react for its performace and flexibility
        mobile apps:
            - react native a framework based on react is used for developing cross platform mobile appllications for ios and andriod

        Interactive dashboards: react is well suited for building data visualization and interactive dashboard applications

        Games:
            -some web-based games are built using react for theier user interfaces

npm i create-react-app

npx create-react-app <file name>

JSX:

    jsx stands for javascrit expression and runs perfectly fine in a JS file too
    this langugae allows us to typle html style code in a js format
    the biggest advantage is allowing us to do calcularions or conditional checking alongside the page rendering

    When creating components or anything that is rendered with the index.ks filr you can instead use jsx
    jsx should only be used with files that are capitilized
    you can use js or jsx but the benefit to jsx os the use of emmet and auto-fill of the html elements

    using code in jsx

    the way to code in jsx is surroundig it with {  }
    this informs the code to treat everything inside of the brackets as regular js
    if you want anything to render then you need to return it from the component function
    lastly just like js when you return something the code stop     

    using {  } for js

    function Test(){
    const src = "https://res.cloudinary.com/dy2nnbnek/image/upload/v1731557752/pet-adoption-site/rqntnynmpyem82o73njb.jpg"
    const w = "250", h="500", alt="german Shepherd"
    return(
        <>
        <img src={src} width={w} height={h} alt={alt} />
        </>
    )
}


Intro to components
    react is written in jsx this is a special form of html
    components are differenciated from the rest of the html tags by using capitals
    components can be used for anything similar that you want to partition into smaller more managable parts

creating new components
    when creating components it is best that they are named singular nouns : Header, Button, Book
    components should also be kept in a components folder

parts of a component
    imports:
    typically useState, useEffect, or other react hook
    arrow function:
    this is the name of the component and will also hold any props that are passed down

    any states, functins, variables
        - before the retrun the react component you can define any js you want to use
    the return statement
        - this will house what you want to be rendered into the html
    export component
        - this just sends off the react components to the dom renderer

    

Components: small chunks of code

Importing components
    - once you have created your components you need to import them on the main app page
    - you can rename them if you like by using the 'as' keyword

    -import {default as Topics} from "../components/question" 

    old way:
    import{Homepgae as Home, CartPage as Cart, ErrorPage as Error} from "../components/";

Using components

    -when you want to use a componetnt you must type it out like a regular html tag but you must use a capital letter
    - capital letters let the react library know to compile the pcde
    - lastly remember that you always need to close all of your react components 
        <Movie /> and <Form />


useState
 -usestate stores a value and returns it to the user similar to a variables
        - setState(newState)
- updating the setState causes a re-render of you page

    const [state, setState] = useState(initialState)

    creating a varibale that when changed will casue a re-render of the component useState(initial value)

 - Conditional rendering examples

    let content;
    if(isLoggedIn){
        content = <AdminPanel />
    }else{
        content = <LoginForm />
    }
    return content

----------------------------------------------------------------
{
            isLoggedIn ? (<AdminPanel/>) : (<LoginPage/>)
        }
-----------------------------------------------------------------


Setting styles \
    lastly there will be times when you need ot use js to pass objects, it is important to remember that requires a double bracket {{...}}
        - one of the most common instances of this is css styles and props
        - style = {{color:blue, fontSize: '40px'}}


Props : storing data in components
    -props short for properties are any setting or value that is attatched to a component
    -these are most used to pass values down the line but can also be used just like html element properties
    - you can give these props any name and any value
    - the better you name it rhe more useful it is

Destructuring props
    - if you have a lot of information you can destructure props tp save space
    - <Question key={data.id} {...data} />

Mapping Arrays
    -when there are several items in an array you can loop through all of them using .map 
    {questions.map((question)=> {
        return(
            <Question key={question.id} {...question} />
        )
    })}


Using Props:
    -using props once they are pased down is as simple as adding the name of the prop to the component parameters
    - we use the {...} to immediatly deconstruct it for us eint he component
    - after accepting the props you can use them as variables
    - this is importnant when we are mapping using the same variables as different values