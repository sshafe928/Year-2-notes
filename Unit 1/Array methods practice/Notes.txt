Advanced array methods
 - manipulating data is highly important
 - master arrays and methods and rejex
 - pivotal for websties databaese and web appllications

Mastering arrays
    -Ternaries 
        - like a mini if statement
        - {conditional ? truepath : falsepath}
    Spread operator
        -(...) 
        -will iterate through and add all values from an array-like object
        -spreads the elements(methods and properties) of an array
    Mapping arrays
        -when you have an array with several items that you want to break down the best way is .map()
        - .map() is an array method that will go through each items and do a thing
        - .map() returns a whole new array when its finished
        -other methods such as forEach() do not create new arrays and instead just paste content for the existing array
    Anatomy of .map()
        -the first part of a map method is a variable name that will represent each item from your array
        - this variable name should be named as the singular or the array
            - people -> person
            - books -> book
        - next you can destructure your item if you like, this is not required but makes setup easier
            -const {name, age, job, shirtColor, drink, pet} = person;
        -lastly you need to return the object bck to the map
            -return {...person, shirtColor: 'tye-dye'}

    .forEach()
        -doesnt return a new array, every modification effects the origional array
        you have 3 values to work with: value(item), index(position), array(whole)
        - the last export for a forEach loop is undefined this really messes with return loops
        - instead you can have a condiitonal that acts depending on the values returned
        - if a list is missing variables they get the definition of undefined, you can deal witht hem by ->
                -counting occurences
                -breaking up the array into smaller arrays
                -printing out every name that starts with an A


    .filter()
        -filter is how you can remove certain items from yuor array
        it will go throuhj each item and comapre them to a conditional that you set up, true gets added and false doesnt

    .(each)
    const numbers = [-1, -2,]
    console.log(
        number.every((num) => num > 100)
    )

    - checks to make sure that every value meets the conditional
    - returns a boolean

    .some()
    - similar to .every, it checks if some of them are true
    - as long as one is true it will return true


    .reduce
    - a method that adds to an output it finds the accumulation of numbers
    - this does nothing for non number values, this is very use ful for creating updates numbers of items
    - items in your cart, money raised by the class


    const array = [2,4,6,8,10]
    array.reduce((accumulator, currentValue,currentIndex, array) =>{
        return accumulator + currentValue
    }, 20)
    accumulator refers to total
    current value, is where it curretnyly is
    current index is the index of the value
    array gives yoyu the entirety of the array
    .reduce(total, current, index,arr) =>.....
    